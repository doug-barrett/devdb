
{#-- This macro will frame the order by clause with the columns and sort order specified in config #}
{#-- Input parmeters   - None #}
{#-- Return            - Order by clause #}

{%- macro sortorder_by_colv(return) -%}
    {%- set nsVariables = namespace(sortcolNames="") -%}
    {%if config.orderby %}
        {%- for i in config.orderbycolumn.get('items') -%}
            {%- set colName = i.sortColName.name -%}
            {%- set colOrder = i.sortOrder -%}
	        {%- if loop.first -%}	      
		        {%- set nsVariables.sortcolNames = '"' + colName + '"' + colOrder -%}	  
	        {%- else -%}      
		        {%- set nsVariables.sortcolNames = nsVariables.sortcolNames + ',' + '"' + colName + '"' + colOrder-%}	  
	        {%- endif -%}
        {%- endfor -%}	
            {%- set nsVariables.sortcolNames = 'order by' + nsVariables.sortcolNames -%}
 
    {% endif %} 
    
    {{- nsVariables.sortcolNames -}}
 
{%- endmacro -%}



{#-- This macro will split the join clause into from and rest of the clauses like where,groupby,orderby ,qualify  #}
{#-- Input parmeters   - joinclause #}
{#-- Return            - from clause and other clauses #}


{%- macro get_clause( joinclause , ret_clause ) -%}

            {% set join_clause = joinclause %}
            {% set has_where_clause = 'where'in join_clause %}
            {% set has_WHERE_clause = 'WHERE'in join_clause %}
            {% set has_order_clause = 'order by'in join_clause %}
            {% set has_ORDER_clause = 'ORDER BY'in join_clause %}
            {% set has_group_clause =  'group by'in join_clause %}
            {% set has_GROUP_clause = 'GROUP BY'in join_clause %}
            {% set has_qualify_clause =  'qualify'in join_clause %}
            {% set has_QUALIFY_clause = 'QUALIFY'in join_clause %}

           

            {% set clause='default' %}

            {% if has_where_clause %}

                {% set keyword='where'%} 
                {% set clause='where_clause' %}
  
            {% elif  has_WHERE_clause %}

                 {% set keyword='WHERE'%}
                 {% set clause='where_clause' %}
            {% endif %}

            {% if has_group_clause and clause != 'where_clause'  %}

                 {% set keyword='group by'%}
                 {% set clause='group_clause' %}
            
            {% elif  has_GROUP_clause and clause != 'where_clause' %}

                 {% set keyword='GROUP BY'%}
                 {% set clause='group_clause' %}

            {% endif %}
			
            {% if has_qualify_clause and clause != 'where_clause' and clause != 'group_clause'  %}

                 {% set keyword='qualify'%}
                 {% set clause='qualify_clause' %}
            
            {% elif  has_QUALIFY_clause and clause != 'where_clause' and clause != 'group_clause'  %}

                 {% set keyword='QUALIFY'%}
                 {% set clause='qualify_clause' %}

            {% endif %}            

			{% if has_order_clause and  clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}

                 {% set keyword='order by'%}
                 {% set clause='order_clause' %}
            
            {% elif has_ORDER_clause and clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}

                 {% set keyword='ORDER BY'%}
                 {% set clause='order_clause' %}

            {% endif %}



            {% if clause == 'where_clause' %}
               {% set parts = join_clause.split(keyword) %}
               {% set from_clause = parts[0] %}
               {% set add_clause = 'AND' + join_clause.split(keyword)[1] %}

            {% elif clause == 'group_clause' %}

               {% set parts = join_clause.split(keyword) %}
               {% set from_clause = parts[0] %}
               {% set add_clause = 'group by' + join_clause.split(keyword)[1] %}

            
            {% elif clause == 'qualify_clause' %}

               {% set parts = join_clause.split(keyword) %}
               {% set from_clause = parts[0] %}
               {% set add_clause = 'qualify' + join_clause.split(keyword)[1] %}


            {% elif clause == 'order_clause' %}

               {% set parts = join_clause.split(keyword) %}
               {% set from_clause = parts[0] %}
               {% set add_clause =  'order by' + join_clause.split(keyword)[1] %}
               

            {% else %}

               {% set from_clause = join_clause %}
               {% set add_clause = '' %}

            {% endif %}
			
			{% if ret_clause == 'from' %}
			   {{ from_clause }}
			{% else %}
			   {{ add_clause }}
			{% endif %}
			
			
{%- endmacro -%}

 
{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
does not permit copying or modification for any other purpose.
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Stage  == #}
{# == Node Type Description    : This node loads data into stage table using config options distinct,groupby all,order by ,multi-source == #}


 {# == To run data quality tests before data insertion == #}

{% for test in node.tests if config.testsEnabled %}
        {% if test.runOrder == 'Before' %}
            {{ test_stage(test.name, test.continueOnFailure) }}
            {{ test.templateString }}
        {% endif %}
    {% endfor %}

{% if node.materializationType == 'table' %}

    {# == Queries to be executed before data insertion  == #}

    {% if config.preSQL %}
        {{ stage('Pre-SQL') }}
        {{ config.preSQL }}
    {% endif %}


    {# == Multi-Source option  == #}

        {% if node.isMultisource %}
            {% set insertStrategy = config.insertStrategy  %}
        {% else %}
            {% set insertStrategy = 'INSERT' %}
        {% endif %}

    {# == Truncate data before data insertion  == #}

        {% if config.truncateBefore %}

            {{ stage('Truncate Stage Table') }}
            TRUNCATE TABLE {{ ref_no_link(node.location.name, node.name) }}

        {% endif %}


        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            {{ stage(insertStrategy + ' Sources' | string ) }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        `{{ col.name }}`
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
        {% endif %}


        {% for source in sources %}

        {# == Insert data from sources into Stage table  == #}

            {% if config.insertStrategy == 'INSERT' %}
                {{ stage('Insert ' + source.name | string ) }}

                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in source.columns %}
                        `{{ col.name }}`
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
            {% endif %}

             (SELECT
            {% if config.selectDistinct %}
            DISTINCT
            {% endif %}
            {% for col in source.columns %}
                {{ get_source_transform(col, quoteChar='`') }} AS `{{ col.name }}`
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}

                {{ source.join }}
                 {% if config.groupByAll %}
                 GROUP BY ALL
                 {% endif %}
                 {{ sortorder_by_colv() }} )


            {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                {{config.insertStrategy}}
            {% endif %}

        {% endfor %}



{# == Queries to be executed post data insertion  == #}

    {% if config.postSQL %}
        {{ stage('Post-SQL') }}
        {{ config.postSQL }}
    {% endif %}
{% endif %}

{# == To run data quality tests after data insertion == #}

{% if config.testsEnabled %}
    {% for test in node.tests %}
        {% if test.runOrder == 'After' %}
            {{ test_stage(test.name, test.continueOnFailure) }}
            {{ test.templateString }}
        {% endif %}
    {% endfor %}

    {% for column in columns %}
        {% for test in column.tests %}
            {{ test_stage(column.name + ": " + test.name) }}
            {{ test.templateString }}
        {% endfor %}
    {% endfor %}
{% endif %}
